worker_processes  1;
user root;  
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    lua_code_cache off;
    gzip  on;
    resolver 127.0.0.11;          
    real_ip_header     X-Forwarded-For;
    real_ip_recursive on;
    lua_package_path '/opt/app/lua-resty-qless-web/lib/?.lua;/opt/app/?.lua;;';
    init_by_lua_block {
      local Qless_Web = require("resty.qless-web")
    }
    init_worker_by_lua_block {
        local resty_qless_worker = require "resty.qless.worker"
        local worker = resty_qless_worker.new({
                host = "redis",
                port = 6379,
               })
        worker:start({
            interval = 1,
            concurrency = 4,
            reserver = "ordered",
            queues = { "my_queue", "my_other_queue" },
        })
    }
    server {
        listen       80;
        server_name  localhost;
        charset utf-8;
        root html;
        default_type text/html;
        location /web {
          default_type text/html;
          location /web/__static {
              internal;
              rewrite ^/web/__static(.*) $1 break;
              root /opt/app/lua-resty-qless-web/static/;
          }
          content_by_lua_block {
              local resty_qless = require "resty.qless"
              local qless, err = resty_qless.new({
                host = "redis",
                port = 6379,
               })
              if not qless then
                 return ngx.say("Qless.new(): ", err)
              end
              local Qless_Web = require("resty.qless-web")
              local web = Qless_Web:new({ client = qless, uri_prefix = "/web" })
              web:run()
          }  
        }
        location / {
           default_type text/html;
           index index.html;
        }
        location /add {
            content_by_lua_block {
                local cjson = require("cjson");
                local qless = require("resty.qless").new({
                    host = "redis",
                    port = 6379,
                })
                local queue = qless.queues['my_queue']
                -- Let's add a job, with some data. Returns Job ID
                local jid = queue:put("jobs.userlogin.job", { hello = "howdy" })
                -- = "0c53b0404c56012f69fa482a1427ab7d"
                -- Now we can ask for a job
                local job = queue:pop()
                job:perform()
                local jobinfo = qless.jobs:get(jid)
                ngx.say(cjson.encode({
                    klass=jobinfo.klass,
                }))
            }
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}